import React from "react";
import { Col, Container, Row, Card } from "react-bootstrap";
import Intro from "../level/Intro";
import FirstLevel from "../level/FirstLevel";
import SecondLevel from "../level/SecondLevel";
import ThirdLevel from "../level/ThirdLevel";
import FourthLevel from "../level/FourthLevel";
import ReportIntro from "../level/ReportIntro";
import Report from "../level/Report";

class GameView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      score: 0,
      level: 1,
      time: "8:55",
      actualLevel: "intro",
      right_one: 0,
      right_two: 0,
      right_three: 0,
      right_four: 0,
      wrong_one: 0,
      wrong_two: 0,
      wrong_three: 0,
      wrong_four: 0,
      info: true,
      scores: [
        {
          id: 1,
          score: 0,
        },
        {
          id: 2,
          score: 0,
        },
        {
          id: 3,
          score: 0,
        },
        {
          id: 4,
          score: 0,
        },
      ],
    };
  }

  addRightOne = () => {
    this.setState({ right_one: this.state.right_one + 1 });
  };

  addRightTwo = () => {
    this.setState({ right_two: this.state.right_two + 1 });
  };

  addRightThree = () => {
    this.setState({ right_three: this.state.right_three + 1 });
  };

  addRightFour = () => {
    this.setState({ right_four: this.state.right_four + 1 });
  };

  addWrongOne = () => {
    this.setState({ wrong_one: this.state.wrong_one + 1 });
  };

  addWrongTwo = () => {
    this.setState({ wrong_two: this.state.wrong_two + 1 });
  };

  addWrongThree = () => {
    this.setState({ wrong_three: this.state.wrong_three + 1 });
  };

  addWrongFour = () => {
    this.setState({ wrong_four: this.state.wrong_four + 1 });
  };

  handleLevel = (level) => {
    this.setState({ actualLevel: level });
  };

  updateContainerForSecondLevel = () => {
    this.setState({ level: 2, time: "9:30" });
  };

  updateContainerForThirdLevel = () => {
    this.setState({ level: 3, time: "11:30" });
  };

  updateContainerForFourthLevel = () => {
    this.setState({ level: 4, time: "15:30" });
  };

  updateScore = (position) => {
    const newScores = this.state.scores.map((item) => {
      if (item.id === position) {
        return { id: position, score: item.score + 50 };
      }
      return item;
    });
    this.setState({ score: this.state.score + 50, scores: newScores });
  };

  updateInfo = () => {
    this.setState({ info: false });
  };

  renderLevel() {
    switch (this.state.actualLevel) {
      case "intro":
        return <Intro handleLevel={this.handleLevel} />;
      case "first":
        return (
          <FirstLevel
            handleLevel={this.handleLevel}
            updateContainer={this.updateContainerForSecondLevel}
            updateScore={this.updateScore}
            right={this.addRightOne}
            wrong={this.addWrongOne}
          />
        );
      case "second":
        return (
          <SecondLevel
            handleLevel={this.handleLevel}
            updateContainer={this.updateContainerForThirdLevel}
            updateScore={this.updateScore}
            right={this.addRightTwo}
            wrong={this.addWrongTwo}
          />
        );
      case "third":
        return (
          <ThirdLevel
            handleLevel={this.handleLevel}
            updateContainer={this.updateContainerForFourthLevel}
            updateScore={this.updateScore}
            right={this.addRightThree}
            wrong={this.addWrongThree}
          />
        );
      case "fourth":
        return (
          <FourthLevel
            handleLevel={this.handleLevel}
            updateScore={this.updateScore}
            updateInfo={this.updateInfo}
            right={this.addRightFour}
            wrong={this.addWrongFour}
          />
        );
      case "report":
        return <ReportIntro handleLevel={this.handleLevel} />;
      case "report_next":
        return (
          <Report
            score={this.state.score}
            scores={this.state.scores}
            handleLevel={this.handleLevel}
            right_one={this.state.right_one}
            wrong_one={this.state.wrong_one}
            right_two={this.state.right_two}
            wrong_two={this.state.wrong_two}
            right_three={this.state.right_three}
            wrong_three={this.state.wrong_three}
            right_four={this.state.right_four}
            wrong_four={this.state.wrong_four}
          />
        );
      default:
        return null;
    }
  }

  render() {
    return (
      <>
        <div>
          <style>{"body { background-color: black; }"}</style>
          <Row>
            <Col></Col>
            <Col>
              {this.state.info && (
                <div
                  className="position-absolute top-0 end-0"
                  style={{
                    fontSize: "40px",
                    fontWeight: "600",
                    color: "#fdfdfe",
                    textShadow:
                      "0px 0px 5px #7FFF00, 0px 0px 10px #7FFF00, 0px 0px 10px #7FFF00,0px 0px 20px #7FFF00",
                  }}
                >
                  Time: {this.state.time}
                </div>
              )}
            </Col>
          </Row>
        </div>
        <Container>
          <Row style={{ marginTop: "80px" }}>
            <Col className="col-1"></Col>
            <Col>
              <Card
                style={{ width: "100%", height: "40rem", background: "#ffff" }}
              >
                <Card.Body>{this.renderLevel()}</Card.Body>
              </Card>
            </Col>
            <Col className="col-1"></Col>
          </Row>
        </Container>
        {this.state.info && (
          <div
            className="fixed-bottom"
            style={{
              fontSize: "40px",
              fontWeight: "600",
              color: "#fdfdfe",
              textShadow:
                "0px 0px 5px #7FFF00, 0px 0px 10px #7FFF00, 0px 0px 10px #7FFF00,0px 0px 20px #7FFF00",
            }}
          >
            <Row>
              <Col>Level: {this.state.level}</Col>
              <Col>
                <div
                  className="position-absolute bottom-0 end-0"
                  style={{
                    fontSize: "40px",
                    fontWeight: "600",
                    color: "#fdfdfe",
                    textShadow:
                      "0px 0px 5px #7FFF00, 0px 0px 10px #7FFF00, 0px 0px 10px #7FFF00,0px 0px 20px #7FFF00",
                  }}
                >
                  Score: {this.state.score}
                </div>
              </Col>
            </Row>
          </div>
        )}
      </>
    );
  }
}

export default GameView;
