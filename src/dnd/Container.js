import update from "immutability-helper";
import { memo, useCallback, useState, React } from "react";
import { Row, Col } from "react-bootstrap";
import { Box } from "./Box";
import { Dustbin } from "./Dustbin";

export function Container({boxesParam, dustbinsParam, callBack}) {
  const [dustbins, setDustbins] = useState( dustbinsParam );
  const [droppedBoxNames, setDroppedBoxNames] = useState([]);
  function isDropped(boxName) {
    return droppedBoxNames.indexOf(boxName) > -1;
  }
  const handleIdOption = (index) => {
    let idOption = dustbins[index].idOption;
    callBack(idOption);
  }
  const handleDrop = useCallback(
    (index, item) => {
      const { name } = item;
      setDroppedBoxNames(
        update(droppedBoxNames, name ? { $push: [name] } : { $push: [] })
      );
      setDustbins(
        update(dustbins, {
          [index]: {
            lastDroppedItem: {
              $set: item,
            },
          },
        }),
      );
      handleIdOption(index);
    },
    [droppedBoxNames, dustbins]
  );
  return (
    <div>
      <Row>
        <Col sm="10">
          <div style={{ overflow: "hidden", clear: "both" }}>
            {boxesParam.map(({ name, type, img, width, heigth }, index) => (
              <Box
                name={name}
                type={type}
                img={img}
                width={width}
                heigth={heigth}
                isDropped={isDropped(name)}
                key={index}
              />
            ))}
          </div>
        </Col>
        <Col sm="2">
          <div style={{ overflow: "hidden", clear: "both" }}>
            {dustbins.map(
              (
                { accepts, lastDroppedItem, img, width, heigth, idOption },
                index
              ) => (
                <Dustbin
                  accept={accepts}
                  lastDroppedItem={lastDroppedItem}
                  callBack={callBack}
                  img={img}
                  width={width}
                  heigth={heigth}
                  onDrop={(item) => handleDrop(index, item)}
                  key={index}
                  idOption={idOption}
                />
              )
            )}
          </div>
        </Col>
      </Row>
    </div>
  );
};

export default memo(Container);